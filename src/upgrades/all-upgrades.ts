import type { Upgrade } from "./upgrade.svelte";
import { BasicUpgrade } from "./basic-upgrade.svelte";
import { Stats } from "$lib/stats/stat-manager";

export const allUpgrades = new Map<string, Upgrade>(
    [
        ["double-click", new BasicUpgrade("Double Click", 10,
            new Map([[Stats.ScorePerClick, 1]]), undefined)],
        ["fast-internet", new BasicUpgrade("Fast Internet", 25,
            undefined, new Map([[Stats.ScorePerSecond, 0.05]]))],
        ["grip-trainer", new BasicUpgrade("Grip Trainer", 50,
            new Map([[Stats.ScorePerClick, 2]]), undefined)],
        ["multithreaded-denial", new BasicUpgrade("Multithreaded Denial", 500,
            undefined, new Map([[Stats.ScorePerSecond, 0.1]]))],
        ["keyboard-shortcuts", new BasicUpgrade("Keyboard Shortcuts", 100,
            new Map([[Stats.ScorePerClick, 5]]), undefined)],
        ["offshore-efficiency", new BasicUpgrade("Offshore Efficiency", 1000,
            undefined, new Map([[Stats.ScorePerSecond, 0.5]]))],
        ["laser-printer", new BasicUpgrade("Laser Printer", 250,
            new Map([[Stats.ScorePerClick, 10]]), undefined)],
        ["policy-parser", new BasicUpgrade("Policy Parser", 2000,
            undefined, new Map([[Stats.ScorePerSecond, 1]]))],
        ["batch-processing", new BasicUpgrade("Batch Processing", 5000,
            undefined, new Map([[Stats.ScorePerSecond, 2]]))],
        ["extra-stapler", new BasicUpgrade("Extra Stapler", 1000,
            new Map([[Stats.ScorePerClick, 15]]), undefined)],
        ["legal-team", new BasicUpgrade("Legal Team", 15000,
            undefined, new Map([[Stats.ScorePerSecond, 5]]))],
        ["ergonomic-mouse", new BasicUpgrade("Ergonomic Mouse", 3000,
            new Map([[Stats.ScorePerClick, 20]]), undefined)],
        ["server-upgrade", new BasicUpgrade("Server Upgrade", 25000,
            undefined, new Map([[Stats.ScorePerSecond, 10]]))],
        ["auto-denial-software", new BasicUpgrade("Auto Denial Software", 10000,
            undefined, new Map([[Stats.ScorePerSecond, 15]]))],
        ["pre-filled-templates", new BasicUpgrade("Pre-filled Templates", 5000,
            new Map([[Stats.ScorePerClick, 30]]), undefined)],
        ["streamlined-paperwork", new BasicUpgrade("Streamlined Paperwork", 50000,
            undefined, new Map([[Stats.ScorePerSecond, 20]]))],
        ["dedicated-line", new BasicUpgrade("Dedicated Line", 20000,
            undefined, new Map([[Stats.ScorePerSecond, 25]]))],
        ["policy-optimizer", new BasicUpgrade("Policy Optimizer", 75000,
            undefined, new Map([[Stats.ScorePerSecond, 50]]))],
        ["ai-enhancer", new BasicUpgrade("AI Enhancer", 100000,
            undefined, new Map([[Stats.ScorePerSecond, 75]]))],
        ["click-multiplier", new BasicUpgrade("Click Multiplier", 20000,
            new Map([[Stats.ScorePerClick, 50]]), undefined)],
        ["denial-bot", new BasicUpgrade("Denial Bot", 250000,
            undefined, new Map([[Stats.ScorePerSecond, 100]]))],
        ["cloud-computing", new BasicUpgrade("Cloud Computing", 500000,
            undefined, new Map([[Stats.ScorePerSecond, 150]]))],
        ["holographic-interface", new BasicUpgrade("Holographic Interface", 1000000,
            undefined, new Map([[Stats.ScorePerSecond, 200]]))],
        ["quantum-denial", new BasicUpgrade("Quantum Denial", 2000000,
            undefined, new Map([[Stats.ScorePerSecond, 300]]))],
        ["virtual-assistant", new BasicUpgrade("Virtual Assistant", 500000,
            new Map([[Stats.ScorePerClick, 100]]), undefined)],
        ["denial-synergy", new BasicUpgrade("Denial Synergy", 5000000,
            undefined, new Map([[Stats.ScorePerSecond, 400]]))],
        ["bureaucracy-mastery", new BasicUpgrade("Bureaucracy Mastery", 10000000,
            undefined, new Map([[Stats.ScorePerSecond, 500]]))],
        ["laser-guided-mouse", new BasicUpgrade("Laser-Guided Mouse", 5000000,
            new Map([[Stats.ScorePerClick, 200]]), undefined)],
        ["ultra-automation", new BasicUpgrade("Ultra Automation", 20000000,
            undefined, new Map([[Stats.ScorePerSecond, 1000]]))]
    ]);